{"version":3,"names":[],"mappings":"","sources":["projects.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nfunction request(method, url, callback) {\n  var XMLHttpRequest = window.XMLHttpRequest;\n  var xmlhttp = new XMLHttpRequest();\n\n  xmlhttp.onreadystatechange = function () {\n    if (xmlhttp.readyState === XMLHttpRequest.DONE) {\n      if (xmlhttp.status > 400) {\n        return callback(new Error('Github failed to load repos'));\n      }\n      if (xmlhttp.status === 200) {\n        var text = xmlhttp.responseText;\n        var json;\n        try {\n          json = JSON.parse(text);\n        } catch (error) {\n          return callback(new Error('Malformed JSON'));\n        }\n        callback(null, json);\n      }\n    }\n  };\n\n  xmlhttp.open(method.toUpperCase(), url, true);\n  xmlhttp.send();\n}\n\nvar pageSize = 100;\n\nfunction getRepos(callback, pageNumber) {\n  pageNumber = pageNumber || 1;\n  request('get', 'https://api.github.com/users/andrejewski/repos?page=' + pageNumber + '&per_page=' + pageSize, function (error, repos) {\n    if (error) {\n      return callback(error);\n    }\n\n    if (repos.length < pageSize) {\n      return callback(null, repos);\n    }\n\n    getRepos(function (error, moreRepos) {\n      if (error) {\n        return callback(error);\n      }\n\n      callback(null, repos.concat(moreRepos));\n    }, pageNumber + 1);\n  });\n}\n\nfunction n(tagAndClass) {\n  var parts = tagAndClass.split('.');\n  var element = document.createElement(parts[0] || 'div');\n  element.className = parts[1];\n  return element;\n}\n\nfunction createProjectNode(options) {\n  var project = n('.project');\n  var about = n('.about');\n  var links = n('.links');\n\n  project.appendChild(about);\n  project.appendChild(links);\n\n  var title = n('h3');\n  title.innerText = options.title;\n\n  var description = n('p');\n  description.innerText = options.description;\n\n  about.appendChild(title);\n  about.appendChild(description);\n\n  var source = n('a.repo-link');\n  source.innerText = 'View source';\n  source.href = options.url;\n\n  var homepage;\n  if (options.homepage) {\n    homepage = n('a.demo-link');\n    homepage.innerText = 'Check it out';\n    homepage.href = options.homepage;\n  }\n\n  if (homepage) {\n    links.appendChild(homepage);\n  }\n  links.appendChild(source);\n\n  return project;\n}\n\nvar loadingSlot = document.getElementById('oss-loading-slot');\nvar slotList = document.getElementById('oss-slot-list');\nvar listToggle = document.getElementById('oss-list-toggle');\n\nvar showMoreText = 'Show all open source projects';\nvar showLessText = 'Chris, you really need to go outside';\n\nfunction toggleList(showing) {\n  var buttonText = showing ? showLessText : showMoreText;\n  var listClass = 'projects ' + (showing ? 'projects--showing' : 'projects--hiding');\n  listToggle.innerText = buttonText;\n  slotList.className = listClass;\n}\n\nfunction main() {\n  getRepos(function (error, repos) {\n    if (error) {\n      var errorMessage = createProjectNode({\n        title: 'Github failed me',\n        description: error.message,\n        url: 'https://github.com/andrejewski'\n      });\n      slotList.replaceChild(errorMessage, loadingSlot);\n      throw error;\n    }\n\n    repos = repos.sort(function (a, b) {\n      var av = a.stargazers_count + a.forks_count;\n      var bv = b.stargazers_count + a.forks_count;\n      return bv - av;\n    });\n\n    slotList.innerHTML = '';\n    for (var i = 0; i < repos.length; i++) {\n      var repo = repos[i];\n      var desc = repo.description;\n      var isDescribed = desc && desc.length > 5;\n      var isSource = !repo.fork;\n      var worthShowing = isDescribed && isSource;\n      if (!worthShowing) {\n        continue;\n      }\n      var project = createProjectNode({\n        url: repo.html_url,\n        title: repo.name,\n        description: repo.description,\n        homepage: repo.homepage\n      });\n      slotList.appendChild(project);\n    }\n  });\n\n  listToggle.onclick = function (flag) {\n    return function () {\n      flag = !flag;\n      toggleList(flag);\n    };\n  }();\n}\n\nvar shouldRun = loadingSlot && slotList && listToggle;\nif (shouldRun) {\n  main();\n}\n\n},{}]},{},[1]);\n"],"file":"projects.js"}